from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.bot.functions.plans.get_current_plan_text import get_current_plan_text
from src.bot.functions.style import b
from src.bot.handlers.texsts import Texts
from src.bot.keyboards import none, create_plan_kb, get_plan_kb, main_kb
from src.bot.states import CompleteState
from src.common.date_and_time import get_tomorrow
from src.models.user import User
from src.services.plans.service import daily_plans_service

router = Router()


async def complete_plan(message: Message, state: FSMContext):
    if daily_plans_service.all_is_closed(User(message)):
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–¥–∞—á–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö",
            reply_markup=create_plan_kb()
        )
        return

    current = daily_plans_service.get_current(User(message))
    if current.date == get_tomorrow():
        await message.answer(
            f'–£ –≤–∞—Å –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–æ –æ–Ω–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ {b("–∑–∞–≤—Ç—Ä–∞")}. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∏—Ö.',
            parse_mode=ParseMode.HTML
        )
        await message.answer(
            get_current_plan_text(User(message)),
            reply_markup=get_plan_kb(),
            parse_mode=ParseMode.HTML
        )
        return

    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏?",
        reply_markup=none()
    )
    await message.answer(
        get_current_plan_text(User(message)),
        reply_markup=none(),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(CompleteState.waiting_for_number)


@router.message(CompleteState.waiting_for_number)
async def complete(message: Message, state: FSMContext):
    real_complete_count = await validate_real_count(message)
    if real_complete_count is None:
        return

    daily_plans_service.complete_current(User(message), real_complete_count)
    last_plan = daily_plans_service.get_last_closed_plan_by_user(User(message))
    real = last_plan.real_count
    expected = last_plan.count

    await message.answer(
        f"üéâ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫—Ä—ã—Ç—ã.\n\n"
        f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {real} –∏–∑ {expected} –∑–∞–¥–∞—á!\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.",
        reply_markup=create_plan_kb()
    )
    await state.clear()


async def validate_real_count(message: Message) -> int | None:
    try:
        real_complete_count = int(message.text)
    except ValueError:
        await message.answer(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á ‚Äì —ç—Ç–æ —á–∏—Å–ª–æ, –ø–æ—ç—Ç–æ–º—É –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.',
            reply_markup=none()
        )
        return

    if real_complete_count < 0:
        await message.answer(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0.',
            reply_markup=none()
        )
        return

    plan = daily_plans_service.get_current(User(message))
    if real_complete_count > plan.count:
        await message.answer(
            '–í—ã –Ω–µ –º–æ–≥–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –±–æ–ª—å—à–µ –∑–∞–¥–∞—á, —á–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏.'
            f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ {plan.count}.',
            reply_markup=none()
        )
        return

    return real_complete_count
